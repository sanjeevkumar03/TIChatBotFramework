// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IQKeyboardManagerSwift
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import Foundation
@_exported import IQKeyboardManagerSwift
import QuartzCore
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc open class IQBarButtonItem : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor @objc override dynamic public init()
  @_Concurrency.MainActor @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @objc override dynamic open var tintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor open func setTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @objc @_Concurrency.MainActor open var invocation: IQKeyboardManagerSwift.IQInvocation? {
    @objc get
    @objc set
  }
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class IQBarButtonItemConfiguration : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor public init(systemItem: UIKit.UIBarButtonItem.SystemItem, action: ObjectiveC.Selector? = nil)
  @objc @_Concurrency.MainActor public init(image: UIKit.UIImage, action: ObjectiveC.Selector? = nil)
  @objc @_Concurrency.MainActor public init(title: Swift.String, action: ObjectiveC.Selector? = nil)
  @_Concurrency.MainActor final public let systemItem: UIKit.UIBarButtonItem.SystemItem?
  @objc @_Concurrency.MainActor final public let image: UIKit.UIImage?
  @objc @_Concurrency.MainActor final public let title: Swift.String?
  @objc @_Concurrency.MainActor final public var action: ObjectiveC.Selector?
  @_Concurrency.MainActor @objc override final public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class IQInvocation : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor weak final public var target: Swift.AnyObject?
  @objc @_Concurrency.MainActor final public var action: ObjectiveC.Selector
  @objc @_Concurrency.MainActor public init(_ target: Swift.AnyObject, _ action: ObjectiveC.Selector)
  @objc @_Concurrency.MainActor final public func invoke(from: Any)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class IQKeyboardConfiguration : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor final public var overrideAppearance: Swift.Bool
  @objc @_Concurrency.MainActor final public var appearance: UIKit.UIKeyboardAppearance
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor public struct IQKeyboardInfo : Swift.Equatable {
  nonisolated public static func == (lhs: IQKeyboardManagerSwift.IQKeyboardInfo, rhs: IQKeyboardManagerSwift.IQKeyboardInfo) -> Swift.Bool
  @objc public enum Name : Swift.Int {
    case willShow
    case didShow
    case willHide
    case didHide
    case willChangeFrame
    case didChangeFrame
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor public let name: IQKeyboardManagerSwift.IQKeyboardInfo.Name
  @_Concurrency.MainActor public let frame: CoreFoundation.CGRect
  @_Concurrency.MainActor public let animationDuration: Foundation.TimeInterval
  @_Concurrency.MainActor public let animationCurve: UIKit.UIView.AnimationCurve
  @_Concurrency.MainActor public var keyboardShowing: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public init(notification: Foundation.Notification?, name: IQKeyboardManagerSwift.IQKeyboardInfo.Name)
  @_Concurrency.MainActor public func animate(alongsideTransition transition: @escaping () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor public class IQKeyboardListener {
  @_Concurrency.MainActor public var keyboardShowing: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public var frame: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor public init()
  @_Concurrency.MainActor public func animate(alongsideTransition transition: @escaping () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardListener {
  public typealias SizeCompletion = (_ name: IQKeyboardManagerSwift.IQKeyboardInfo.Name, _ size: CoreFoundation.CGSize) -> Swift.Void
  @_Concurrency.MainActor public func registerSizeChange(identifier: Swift.AnyHashable, changeHandler: @escaping IQKeyboardManagerSwift.IQKeyboardListener.SizeCompletion)
  @_Concurrency.MainActor public func unregisterSizeChange(identifier: Swift.AnyHashable)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class IQKeyboardManager : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor public static let shared: IQKeyboardManagerSwift.IQKeyboardManager
  @objc @_Concurrency.MainActor final public var enable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor final public var keyboardDistanceFromTextField: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor final public var enableAutoToolbar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor final public let toolbarConfiguration: IQKeyboardManagerSwift.IQToolbarConfiguration
  @objc @_Concurrency.MainActor final public let keyboardConfiguration: IQKeyboardManagerSwift.IQKeyboardConfiguration
  @objc @_Concurrency.MainActor final public var resignOnTouchOutside: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor final public var resignFirstResponderGesture: UIKit.UITapGestureRecognizer {
    @objc get
    @objc set
  }
  @discardableResult
  @objc @_Concurrency.MainActor final public func resignFirstResponder() -> Swift.Bool
  @objc @_Concurrency.MainActor final public var playInputClicks: Swift.Bool
  @objc @_Concurrency.MainActor final public var layoutIfNeededOnUpdate: Swift.Bool
  @objc @_Concurrency.MainActor final public var disabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var enabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var disabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var enabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var toolbarPreviousNextAllowedClasses: [UIKit.UIView.Type]
  @objc @_Concurrency.MainActor final public var disabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var enabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var touchResignedGestureIgnoreClasses: [UIKit.UIView.Type]
  @objc deinit
  @objc @_Concurrency.MainActor final public func reloadLayoutIfNeeded()
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager {
  @objc @_Concurrency.MainActor final public var enableDebugging: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor public struct Static {
  }
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager {
  @available(*, unavailable, renamed: "resignOnTouchOutside")
  @objc @_Concurrency.MainActor final public var shouldResignOnTouchOutside: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "playInputClicks")
  @objc @_Concurrency.MainActor final public var shouldPlayInputClicks: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "This feature has been removed due to few compatibility problems")
  @objc @_Concurrency.MainActor final public func registerTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @available(*, unavailable, message: "This feature has been removed due to few compatibility problems")
  @objc @_Concurrency.MainActor final public func unregisterTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager {
  @available(*, unavailable, renamed: "toolbarConfiguration.manageBehavior")
  @objc @_Concurrency.MainActor final public var toolbarManageBehaviour: IQKeyboardManagerSwift.IQAutoToolbarManageBehavior {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.useTextFieldTintColor")
  @objc @_Concurrency.MainActor final public var shouldToolbarUsesTextFieldTintColor: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.tintColor")
  @objc @_Concurrency.MainActor final public var toolbarTintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.barTintColor")
  @objc @_Concurrency.MainActor final public var toolbarBarTintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.previousNextDisplayMode")
  @objc @_Concurrency.MainActor final public var previousNextDisplayMode: IQKeyboardManagerSwift.IQPreviousNextDisplayMode {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager {
  @available(*, unavailable, renamed: "toolbarConfiguration.previousBarButtonConfiguration.image", message: "To change, please assign a new toolbarConfiguration.previousBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarPreviousBarButtonItemImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.previousBarButtonConfiguration.title", message: "To change, please assign a new toolbarConfiguration.previousBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarPreviousBarButtonItemText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.previousBarButtonConfiguration.accessibilityLabel", message: "To change, please assign a new toolbarConfiguration.previousBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarPreviousBarButtonItemAccessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.nextBarButtonConfiguration.image", message: "To change, please assign a new toolbarConfiguration.nextBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarNextBarButtonItemImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.nextBarButtonConfiguration.title", message: "To change, please assign a new toolbarConfiguration.nextBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarNextBarButtonItemText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.nextBarButtonConfiguration.accessibilityLabel", message: "To change, please assign a new toolbarConfiguration.nextBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarNextBarButtonItemAccessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.doneBarButtonConfiguration.image", message: "To change, please assign a new toolbarConfiguration.doneBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarDoneBarButtonItemImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.doneBarButtonConfiguration.title", message: "To change, please assign a new toolbarConfiguration.doneBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarDoneBarButtonItemText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.doneBarButtonConfiguration.accessibilityLabel", message: "To change, please assign a new toolbarConfiguration.doneBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarDoneBarButtonItemAccessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager {
  @available(*, unavailable, renamed: "toolbarConfiguration.placeholderConfiguration.accessibilityLabel")
  @objc @_Concurrency.MainActor final public var toolbarTitlBarButtonItemAccessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.placeholderConfiguration.showPlaceholder")
  @objc @_Concurrency.MainActor final public var shouldShowToolbarPlaceholder: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.placeholderConfiguration.font")
  @objc @_Concurrency.MainActor final public var placeholderFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.placeholderConfiguration.color")
  @objc @_Concurrency.MainActor final public var placeholderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.placeholderConfiguration.buttonColor")
  @objc @_Concurrency.MainActor final public var placeholderButtonColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager {
  @available(*, unavailable, renamed: "keyboardConfiguration.overrideAppearance")
  @objc @_Concurrency.MainActor final public var overrideKeyboardAppearance: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "keyboardConfiguration.appearance")
  @objc @_Concurrency.MainActor final public var keyboardAppearance: UIKit.UIKeyboardAppearance {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager {
  public typealias SizeBlock = (_ size: CoreFoundation.CGSize) -> Swift.Void
  @available(*, unavailable, message: "This feature has been moved to IQKeyboardListener, use it directly by creating new instance")
  @objc @_Concurrency.MainActor final public func registerKeyboardSizeChange(identifier: Swift.AnyHashable, sizeHandler: @escaping IQKeyboardManagerSwift.IQKeyboardManager.SizeBlock)
  @available(*, unavailable, message: "This feature has been moved to IQKeyboardListener, use it directly by creating new instance")
  @objc @_Concurrency.MainActor final public func unregisterKeyboardSizeChange(identifier: Swift.AnyHashable)
  @available(*, unavailable, message: "This feature has been moved to IQKeyboardListener, use it directly by creating new instance")
  @objc @_Concurrency.MainActor final public var keyboardShowing: Swift.Bool {
    @objc get
  }
  @available(*, unavailable, message: "This feature has been moved to IQKeyboardListener, use it directly by creating new instance")
  @objc @_Concurrency.MainActor final public var keyboardFrame: CoreFoundation.CGRect {
    @objc get
  }
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager {
  @_Concurrency.MainActor final public var movedDistance: CoreFoundation.CGFloat {
    get
  }
  @objc @_Concurrency.MainActor final public var movedDistanceChanged: ((CoreFoundation.CGFloat) -> Swift.Void)? {
    @objc get
    @objc set(newValue)
  }
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager {
  @objc @_Concurrency.MainActor final public func reloadInputViews()
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager {
  @objc @_Concurrency.MainActor final public var canGoPrevious: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor final public var canGoNext: Swift.Bool {
    @objc get
  }
  @discardableResult
  @objc @_Concurrency.MainActor final public func goPrevious() -> Swift.Bool
  @discardableResult
  @objc @_Concurrency.MainActor final public func goNext() -> Swift.Bool
}
@available(iOSApplicationExtension, unavailable)
public struct IQKeyboardManagerWrapper<Base> {
  public let base: Base
  public init(_ base: Base)
}
@available(iOSApplicationExtension, unavailable)
public protocol IQKeyboardManagerCompatible {
  associatedtype Base
  var iq: IQKeyboardManagerSwift.IQKeyboardManagerWrapper<Self.Base> { get set }
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManagerCompatible {
  public var iq: IQKeyboardManagerSwift.IQKeyboardManagerWrapper<Self> {
    get
    set
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQAutoToolbarManageBehavior : Swift.Int {
  case bySubviews
  case byTag
  case byPosition
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQPreviousNextDisplayMode : Swift.Int {
  case `default`
  case alwaysHide
  case alwaysShow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQEnableMode : Swift.Int {
  case `default`
  case enabled
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class IQKeyboardReturnKeyHandler : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor weak final public var delegate: (any UIKit.UITextFieldDelegate & UIKit.UITextViewDelegate)?
  @objc @_Concurrency.MainActor final public var lastTextFieldReturnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc @_Concurrency.MainActor public init(controller: UIKit.UIViewController)
  @objc deinit
  @objc @_Concurrency.MainActor final public func addTextFieldView(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor final public func removeTextFieldView(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor final public func addResponderFromView(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor final public func removeResponderFromView(_ view: UIKit.UIView)
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardReturnKeyHandler : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardReturnKeyHandler : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange) -> Swift.Bool
}
@available(iOS 16.0, *)
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardReturnKeyHandler {
  @_Concurrency.MainActor @objc final public func textView(_ aTextView: UIKit.UITextView, editMenuForTextIn range: Foundation.NSRange, suggestedActions: [UIKit.UIMenuElement]) -> UIKit.UIMenu?
  @_Concurrency.MainActor @objc final public func textView(_ aTextView: UIKit.UITextView, willPresentEditMenuWith animator: any UIKit.UIEditMenuInteractionAnimating)
  @_Concurrency.MainActor @objc final public func textView(_ aTextView: UIKit.UITextView, willDismissEditMenuWith animator: any UIKit.UIEditMenuInteractionAnimating)
}
@available(iOS 17.0, *)
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardReturnKeyHandler {
  @_Concurrency.MainActor @objc final public func textView(_ aTextView: UIKit.UITextView, primaryActionFor textItem: UIKit.UITextItem, defaultAction: UIKit.UIAction) -> UIKit.UIAction?
  @_Concurrency.MainActor @objc final public func textView(_ aTextView: UIKit.UITextView, menuConfigurationFor textItem: UIKit.UITextItem, defaultMenu: UIKit.UIMenu) -> UIKit.UITextItem.MenuConfiguration?
  @_Concurrency.MainActor @objc final public func textView(_ textView: UIKit.UITextView, textItemMenuWillDisplayFor textItem: UIKit.UITextItem, animator: any UIKit.UIContextMenuInteractionAnimating)
  @_Concurrency.MainActor @objc final public func textView(_ textView: UIKit.UITextView, textItemMenuWillEndFor textItem: UIKit.UITextItem, animator: any UIKit.UIContextMenuInteractionAnimating)
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor public protocol IQPlaceholderable : AnyObject {
  @_Concurrency.MainActor var placeholder: Swift.String? { get set }
  @_Concurrency.MainActor var attributedPlaceholder: Foundation.NSAttributedString? { get set }
}
@available(iOSApplicationExtension, unavailable)
extension UIKit.UITextField : IQKeyboardManagerSwift.IQPlaceholderable {
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQTextView : IQKeyboardManagerSwift.IQPlaceholderable {
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc open class IQPreviousNextView : UIKit.UIView {
  @_Concurrency.MainActor @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor public struct IQTextFieldViewInfo : Swift.Equatable {
  nonisolated public static func == (lhs: IQKeyboardManagerSwift.IQTextFieldViewInfo, rhs: IQKeyboardManagerSwift.IQTextFieldViewInfo) -> Swift.Bool
  @_Concurrency.MainActor @objc public enum Name : Swift.Int {
    case beginEditing
    case endEditing
    nonisolated public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    nonisolated public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor public let name: IQKeyboardManagerSwift.IQTextFieldViewInfo.Name
  @_Concurrency.MainActor public let textFieldView: UIKit.UIView
  @_Concurrency.MainActor public init?(notification: Foundation.Notification?, name: IQKeyboardManagerSwift.IQTextFieldViewInfo.Name)
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor public class IQTextFieldViewListener {
  @_Concurrency.MainActor public var textFieldView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor public init()
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQTextFieldViewListener {
  public typealias TextFieldViewCompletion = (_ info: IQKeyboardManagerSwift.IQTextFieldViewInfo) -> Swift.Void
  @_Concurrency.MainActor public func registerTextFieldViewChange(identifier: Swift.AnyHashable, changeHandler: @escaping IQKeyboardManagerSwift.IQTextFieldViewListener.TextFieldViewCompletion)
  @_Concurrency.MainActor public func unregisterSizeChange(identifier: Swift.AnyHashable)
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc open class IQTextView : UIKit.UITextView {
  @_Concurrency.MainActor @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor @objc override dynamic open func awakeFromNib()
  @objc @IBInspectable @_Concurrency.MainActor open var placeholderTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override weak dynamic open var delegate: (any UIKit.UITextViewDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @objc override dynamic open func caretRect(for position: UIKit.UITextPosition) -> CoreFoundation.CGRect
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc open class IQTitleBarButtonItem : IQKeyboardManagerSwift.IQBarButtonItem {
  @objc @_Concurrency.MainActor open var titleFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor open var titleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor open var selectableTitleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor convenience public init(title: Swift.String?)
  @_Concurrency.MainActor @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc open class IQToolbar : UIKit.UIToolbar, UIKit.UIInputViewAudioFeedback {
  @_Concurrency.MainActor @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor open var additionalLeadingItems: [UIKit.UIBarButtonItem]
  @_Concurrency.MainActor open var additionalTrailingItems: [UIKit.UIBarButtonItem]
  @objc @_Concurrency.MainActor open var previousBarButton: IQKeyboardManagerSwift.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor open var nextBarButton: IQKeyboardManagerSwift.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor open var titleBarButton: IQKeyboardManagerSwift.IQTitleBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor open var doneBarButton: IQKeyboardManagerSwift.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor open var fixedSpaceBarButton: IQKeyboardManagerSwift.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open var enableInputClicksWhenVisible: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class IQToolbarConfiguration : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor final public var useTextFieldTintColor: Swift.Bool
  @objc @_Concurrency.MainActor final public var tintColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor final public var barTintColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor final public var previousNextDisplayMode: IQKeyboardManagerSwift.IQPreviousNextDisplayMode
  @objc @_Concurrency.MainActor final public var manageBehavior: IQKeyboardManagerSwift.IQAutoToolbarManageBehavior
  @objc @_Concurrency.MainActor final public var previousBarButtonConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration?
  @objc @_Concurrency.MainActor final public var nextBarButtonConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration?
  @objc @_Concurrency.MainActor final public var doneBarButtonConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration?
  @objc @_Concurrency.MainActor final public let placeholderConfiguration: IQKeyboardManagerSwift.IQToolbarPlaceholderConfiguration
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class IQToolbarPlaceholderConfiguration : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor final public var showPlaceholder: Swift.Bool
  @objc @_Concurrency.MainActor final public var font: UIKit.UIFont?
  @objc @_Concurrency.MainActor final public var color: UIKit.UIColor?
  @objc @_Concurrency.MainActor final public var buttonColor: UIKit.UIColor?
  @_Concurrency.MainActor @objc override final public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension UIKit.UIScrollView : IQKeyboardManagerSwift.IQKeyboardManagerCompatible {
  @_Concurrency.MainActor(unsafe) public var iq: IQKeyboardManagerSwift.IQKeyboardManagerWrapper<UIKit.UIView> {
    get
    set
  }
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor extension IQKeyboardManagerSwift.IQKeyboardManagerWrapper where Base : UIKit.UIScrollView {
  @_Concurrency.MainActor public var ignoreScrollingAdjustment: Swift.Bool {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var ignoreContentInsetAdjustment: Swift.Bool {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var restoreContentOffset: Swift.Bool {
    get
    set(newValue)
  }
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIScrollView {
  @objc @available(*, unavailable, renamed: "iq.ignoreScrollingAdjustment")
  @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreScrollingAdjustment: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.ignoreContentInsetAdjustment")
  @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreContentInsetAdjustment: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.restoreContentOffset")
  @_Concurrency.MainActor(unsafe) dynamic public var shouldRestoreScrollViewContentOffset: Swift.Bool {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
extension UIKit.UIView : IQKeyboardManagerSwift.IQKeyboardManagerCompatible {
  @_Concurrency.MainActor(unsafe) public static let defaultKeyboardDistance: CoreFoundation.CGFloat
  public typealias Base = UIKit.UIView
}
@available(iOSApplicationExtension, unavailable)
@available(*, unavailable, renamed: "UIView.defaultKeyboardDistance")
public let kIQUseDefaultKeyboardDistance: CoreFoundation.CGFloat
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor extension IQKeyboardManagerSwift.IQKeyboardManagerWrapper where Base : UIKit.UIView {
  @_Concurrency.MainActor public var distanceFromKeyboard: CoreFoundation.CGFloat {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var ignoreSwitchingByNextPrevious: Swift.Bool {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var enableMode: IQKeyboardManagerSwift.IQEnableMode {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var resignOnTouchOutsideMode: IQKeyboardManagerSwift.IQEnableMode {
    get
    set(newValue)
  }
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @available(*, unavailable, renamed: "iq.distanceFromKeyboard")
  @_Concurrency.MainActor(unsafe) dynamic public var keyboardDistanceFromTextField: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.ignoreSwitchingByNextPrevious")
  @_Concurrency.MainActor(unsafe) dynamic public var ignoreSwitchingByNextPrevious: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.enableMode")
  @_Concurrency.MainActor(unsafe) dynamic public var enableMode: IQKeyboardManagerSwift.IQEnableMode {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.resignOnTouchOutsideMode")
  @_Concurrency.MainActor(unsafe) dynamic public var shouldResignOnTouchOutsideMode: IQKeyboardManagerSwift.IQEnableMode {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor extension IQKeyboardManagerSwift.IQKeyboardManagerWrapper where Base : UIKit.UIView {
  @_Concurrency.MainActor public func viewContainingController() -> UIKit.UIViewController?
  @_Concurrency.MainActor public func topMostController() -> UIKit.UIViewController?
  @_Concurrency.MainActor public func parentContainerViewController() -> UIKit.UIViewController?
  @_Concurrency.MainActor public func superviewOf<T>(type classType: T.Type, belowView: UIKit.UIView? = nil) -> T? where T : UIKit.UIView
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @available(*, unavailable, renamed: "iq.viewContainingController()")
  @_Concurrency.MainActor(unsafe) dynamic public func viewContainingController() -> UIKit.UIViewController?
  @objc @available(*, unavailable, renamed: "iq.topMostController()")
  @_Concurrency.MainActor(unsafe) dynamic public func topMostController() -> UIKit.UIViewController?
  @objc @available(*, unavailable, renamed: "iq.parentContainerViewController()")
  @_Concurrency.MainActor(unsafe) dynamic public func parentContainerViewController() -> UIKit.UIViewController?
  @objc @available(*, unavailable, renamed: "iq.superviewOf(type:belowView:)")
  @_Concurrency.MainActor(unsafe) dynamic public func superviewOfClassType(_ classType: UIKit.UIView.Type, belowView: UIKit.UIView? = nil) -> UIKit.UIView?
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor extension IQKeyboardManagerSwift.IQKeyboardManagerWrapper where Base : UIKit.UIView {
  @_Concurrency.MainActor public var toolbar: IQKeyboardManagerSwift.IQToolbar {
    get
  }
  @_Concurrency.MainActor public var hidePlaceholder: Swift.Bool {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var placeholder: Swift.String? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var drawingPlaceholder: Swift.String? {
    get
  }
  @_Concurrency.MainActor public func addToolbar(target: Swift.AnyObject?, previousConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration? = nil, nextConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration? = nil, rightConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration? = nil, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addDone(target: Swift.AnyObject?, action: ObjectiveC.Selector, showPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addDone(target: Swift.AnyObject?, action: ObjectiveC.Selector, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addRightButton(target: Swift.AnyObject?, configuration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration, showPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addRightButton(target: Swift.AnyObject?, configuration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addRightLeft(target: Swift.AnyObject?, rightConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration, leftConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration, showPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addRightLeft(target: Swift.AnyObject?, rightConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration, leftConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addPreviousNextRight(target: Swift.AnyObject?, previousConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration? = nil, nextConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration? = nil, rightConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration?, showPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addPreviousNextRight(target: Swift.AnyObject?, previousConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration? = nil, nextConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration? = nil, rightConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration?, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addPreviousNextDone(target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, showPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addPreviousNextDone(target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc extension UIKit.UIView {
  @objc @available(*, unavailable, renamed: "iq.toolbar")
  @_Concurrency.MainActor dynamic public var keyboardToolbar: IQKeyboardManagerSwift.IQToolbar {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.hidePlaceholder")
  @_Concurrency.MainActor dynamic public var shouldHideToolbarPlaceholder: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.placeholder")
  @_Concurrency.MainActor dynamic public var toolbarPlaceholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.drawingPlaceholder")
  @_Concurrency.MainActor dynamic public var drawingToolbarPlaceholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.addToolbar(target:previousConfiguration:nextConfiguration:rightConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addKeyboardToolbarWithTarget(target: Swift.AnyObject?, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil, rightBarButtonConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration?, previousBarButtonConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration? = nil, nextBarButtonConfiguration: IQKeyboardManagerSwift.IQBarButtonItemConfiguration? = nil)
  @objc @available(*, unavailable, renamed: "iq.addDone(target:action:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addDone(target:action:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightButton(target:configuration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightButton(target:configuration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightButton(target:configuration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightButton(target:configuration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextDone(target:previousAction:nextAction:doneAction:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextDone(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextDone(target:previousAction:nextAction:doneAction:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextRight(target:previousConfiguration:nextConfiguration:rightConfiguration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextRight(target:previousConfiguration:nextConfiguration:rightConfiguration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextRight(target:previousConfiguration:nextConfiguration:rightConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextRight(target:previousConfiguration:nextConfiguration:rightConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor dynamic open func iq_parentContainerViewController() -> UIKit.UIViewController?
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIViewController {
  @objc @available(*, unavailable, renamed: "iq_parentContainerViewController()")
  @_Concurrency.MainActor(unsafe) dynamic open func parentIQContainerViewController() -> UIKit.UIViewController?
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIImage {
  @objc public static let keyboardPreviousImage: UIKit.UIImage
  @objc public static let keyboardNextImage: UIKit.UIImage
}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQBarButtonItemConfiguration : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQInvocation : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardConfiguration : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardInfo : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardInfo.Name : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardInfo.Name : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardInfo.Name : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardListener : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardManager.Static : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQAutoToolbarManageBehavior : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQAutoToolbarManageBehavior : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQAutoToolbarManageBehavior : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQPreviousNextDisplayMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQPreviousNextDisplayMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQPreviousNextDisplayMode : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQEnableMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQEnableMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQEnableMode : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQKeyboardReturnKeyHandler : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQTextFieldViewInfo : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQTextFieldViewInfo.Name : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQTextFieldViewInfo.Name : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQTextFieldViewInfo.Name : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQTextFieldViewInfo.Name : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQTextFieldViewListener : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQToolbarConfiguration : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension IQKeyboardManagerSwift.IQToolbarPlaceholderConfiguration : Swift.Sendable {}
